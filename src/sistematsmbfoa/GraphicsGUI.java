/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sistematsmbfoa;

import com.garcialopez.metaheuristic.tsmbfoa.TSMBFOA;
import com.garcialopez.optimizationmodel.CNOP;
import java.awt.BasicStroke;
import java.awt.Color; 
import java.awt.Shape;
import java.text.DecimalFormat; 
import java.util.ArrayList;
import java.util.List;
import javax.swing.JPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.chart.renderer.category.BoxAndWhiskerRenderer;
import org.jfree.chart.renderer.xy.XYLineAndShapeRenderer; 
import org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset;
 
import org.jfree.data.xy.DefaultXYDataset;
import org.jfree.util.ShapeUtilities;


/**
 *
 * @author 
 */
public final class GraphicsGUI extends javax.swing.JDialog {

    CNOP cnop;    
    TSMBFOA tsmbfoa;
    public GraphicsGUI(java.awt.Frame parent, boolean modal, CNOP cnop, TSMBFOA tsmbfoa) {
        super(parent, modal);
        initComponents();
        this.setLocationRelativeTo(null);
        this.cnop = cnop;
        this.tsmbfoa = tsmbfoa;
        
        this.showGraphics0();
        this.showGraphics2();                                                   
        this.showBoxPlot();
                                
        this.pack();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        convergence = new javax.swing.JPanel();
        disper = new javax.swing.JPanel();
        boxplot = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Graphics");

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));

        convergence.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout convergenceLayout = new javax.swing.GroupLayout(convergence);
        convergence.setLayout(convergenceLayout);
        convergenceLayout.setHorizontalGroup(
            convergenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 775, Short.MAX_VALUE)
        );
        convergenceLayout.setVerticalGroup(
            convergenceLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 436, Short.MAX_VALUE)
        );

        disper.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout disperLayout = new javax.swing.GroupLayout(disper);
        disper.setLayout(disperLayout);
        disperLayout.setHorizontalGroup(
            disperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        disperLayout.setVerticalGroup(
            disperLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 289, Short.MAX_VALUE)
        );

        boxplot.setBackground(new java.awt.Color(255, 255, 255));
        boxplot.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout boxplotLayout = new javax.swing.GroupLayout(boxplot);
        boxplot.setLayout(boxplotLayout);
        boxplotLayout.setHorizontalGroup(
            boxplotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 549, Short.MAX_VALUE)
        );
        boxplotLayout.setVerticalGroup(
            boxplotLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(convergence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(disper, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(boxplot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(boxplot, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(convergence, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(18, 18, 18)
                        .addComponent(disper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
       
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel boxplot;
    private javax.swing.JPanel convergence;
    private javax.swing.JPanel disper;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
    
    DefaultXYDataset dataset;
    JFreeChart chart;
    XYPlot plot;
    XYLineAndShapeRenderer renderer;
    ChartPanel chartPane1;
    
    public void showGraphics0(){                
        dataset = new DefaultXYDataset();        
        dataset.addSeries("Best Values ", this.tsmbfoa.getConvergenceMedia());       
        
        chart = null;
        chart = ChartFactory.createXYLineChart(
                this.cnop.getNameProblem()
                , "Evaluations"
                , "Obj Function"
                , dataset
                ,  PlotOrientation.VERTICAL, false, true, false);                  
         
        ((NumberAxis) chart.getXYPlot().getRangeAxis()).setNumberFormatOverride(new DecimalFormat("#.###############"));                  
         
        plot = (XYPlot) chart.getPlot();                
        renderer = (XYLineAndShapeRenderer) plot.getRenderer();           
        renderer.setSeriesShapesVisible(0, true);
        renderer.setSeriesPaint(0, Color.BLUE);
        
        Shape cross = ShapeUtilities.createDiamond(1);
        renderer.setSeriesShape(0, cross);
        
        renderer.setSeriesStroke(0, new BasicStroke(2));
        chart.getXYPlot().setRenderer(renderer);
        plot.setDomainGridlinePaint(Color.GRAY);
        plot.setRangeGridlinePaint(Color.GRAY);
        chartPane1 = new ChartPanel(chart);
        chart.getPlot().setBackgroundPaint( new Color(250, 250, 250) );
        
        graph(convergence, chartPane1);        
    }
 
       

    public void showGraphics2(){                
        dataset = new DefaultXYDataset();
        dataset.addSeries("Best values ", this.tsmbfoa.getDataGraphicsBestResults());
                 
        chart = null;
        chart = ChartFactory.createXYLineChart(
                "Best values found"
                , "Iteration"
                , "Best value"
                , dataset
                ,  PlotOrientation.VERTICAL, false, true, false);                  
         
        if (this.tsmbfoa.getStatistic()[0] == this.tsmbfoa.getStatistic()[4]) {
            chart.getXYPlot().getRangeAxis().setRange(this.tsmbfoa.getStatistic()[0] - 0.00001, this.tsmbfoa.getStatistic()[4] + 0.00001);                
        }else{
            chart.getXYPlot().getRangeAxis().setRange(this.tsmbfoa.getStatistic()[0], this.tsmbfoa.getStatistic()[4]);
        }                                 
        
        ((NumberAxis) chart.getXYPlot().getRangeAxis()).setNumberFormatOverride(new DecimalFormat("#.###############"));                  
         
        plot = (XYPlot) chart.getPlot();           
        renderer= (XYLineAndShapeRenderer) plot.getRenderer();         
        renderer.setSeriesShapesVisible(0, true);
        renderer.setSeriesPaint(0, Color.MAGENTA);
        renderer.setSeriesStroke(0, new BasicStroke(2));
        chart.getXYPlot().setRenderer(renderer);
        
        chartPane1 = new ChartPanel(chart);
        chart.getPlot().setBackgroundPaint( new Color(250, 250, 250) );

        chartPane1.setDomainZoomable(false);
        chartPane1.setRangeZoomable(false); 
        
        graph(disper, chartPane1);               
    }
    
    public void showBoxPlot(){
        
        List<Double> list = new ArrayList<>();
        for (int i = 0; i < this.tsmbfoa.getDataGraphicsBestResults()[0].length; i++) {
            list.add(this.tsmbfoa.getDataGraphicsBestResults()[1][i]);            
        }                
        
        DefaultBoxAndWhiskerCategoryDataset data = new DefaultBoxAndWhiskerCategoryDataset();        
        data.add(list, "bestValue", "");      
        
        
        CategoryAxis xAxis = new CategoryAxis("Iterations");
        NumberAxis yAxis = new NumberAxis("Values");
        yAxis.setAutoRangeIncludesZero(false);
        BoxAndWhiskerRenderer re = new BoxAndWhiskerRenderer();
                
        
        re.setFillBox(true);
        re.setSeriesToolTipGenerator(1, new BoxAndWhiskerToolTipGenerator());
        re.setMeanVisible(false);
        re.setSeriesPaint(0, new Color(0, 0, 255, 64));              
        CategoryPlot plot1 = new CategoryPlot(data, xAxis, yAxis, re); 
        
                        
        chart = null;
        chart = new JFreeChart("Best values box plot", plot1);                                 
        
        chartPane1 = new ChartPanel(chart);
        chart.getPlot().setBackgroundPaint( new Color(250, 250, 250) );
        chart.setBackgroundPaint(Color.white);

        graph(boxplot, chartPane1);
    }
   
    

    
    private void graph(JPanel panel, ChartPanel chartPane){
        panel.add(chartPane);
        chartPane.setBounds(0, 0, panel.getWidth(), panel.getHeight());    
    }
    
    
    
 /**
  * 
        public void showGraphics1(){                
        dataset = new DefaultXYDataset();          
        dataset.addSeries("Best values ", this.tsmbfoa.getConvergence());       
        chart = null;
        chart = ChartFactory.createXYLineChart("Convergence of the best value found", "Generations", "Obj Function", dataset, PlotOrientation.VERTICAL, false, true, false);                  
        ((NumberAxis) chart.getXYPlot().getRangeAxis()).setNumberFormatOverride(new DecimalFormat("#.###############"));                  
        plot = (XYPlot) chart.getPlot();                
        renderer= (XYLineAndShapeRenderer) plot.getRenderer();         
        renderer.setSeriesShapesVisible(0, true);
        renderer.setSeriesPaint(0, Color.RED);
        renderer.setSeriesStroke(0, new BasicStroke(1));
        chart.getXYPlot().setRenderer(renderer);
        chartPane1 = new ChartPanel(chart);
//        chartPane1.setDomainZoomable(false);
//        chartPane1.setRangeZoomable(false); 
        //graph(graphics2, chartPane1);                
    }
   */
    
}
